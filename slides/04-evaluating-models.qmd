---
title: "4 - Evaluating models"
subtitle: "Machine learning with tidymodels"
format:
  revealjs: 
    slide-number: true
    footer: <https://workshops.tidymodels.org>
    include-before-body: header.html
    theme: [default, tidymodels.scss]
knitr:
  opts_chunk: 
    echo: true
---

```{r}
#| include: false
#| file: setup.R
```

## Metrics for model performance `r hexes("yardstick")`

```{r}
#| echo: false
library(tidymodels)
library(countdown)
data("tree_frogs", package = "stacks")
tree_frogs <- tree_frogs %>%
  mutate(t_o_d = factor(t_o_d)) %>% 
  filter(!is.na(latency)) %>%
  select(-c(clutch, hatched))

set.seed(123)
frog_split <- initial_split(tree_frogs, prop = 0.8, strata = latency)
frog_train <- training(frog_split)
frog_test <- testing(frog_split)
tree_spec <- decision_tree(cost_complexity = 0.001, mode = "regression")
tree_wflow <- workflow(latency ~ ., tree_spec)
tree_fit <- fit(tree_wflow, frog_train)
```

```{r}
augment(tree_fit, new_data = frog_test) %>%
  metrics(latency, .pred)
```

. . .

-   RMSE: difference between the predicted and observed values ⬇️
-   $R^2$: squared correlation between the predicted and observed values ⬆️
-   MAE: similar to RMSE, but mean absolute error ⬇️

## Metrics for model performance `r hexes("yardstick")`

```{r}
augment(tree_fit, new_data = frog_test) %>%
  rmse(latency, .pred)
```

## Metrics for model performance `r hexes("yardstick")`

```{r}
augment(tree_fit, new_data = frog_test) %>%
  group_by(reflex) %>%
  rmse(latency, .pred)
```

## Metrics for model performance `r hexes("yardstick")`

```{r}
frog_metrics <- metric_set(rmse, msd)
augment(tree_fit, new_data = frog_test) %>%
  frog_metrics(latency, .pred)
```

##  {background-iframe="https://yardstick.tidymodels.org/reference/index.html"}

::: footer
:::

# We'll talk about classification metrics tomorrow!

# ⚠️ DANGERS OF OVERFITTING ⚠️

## Dangers of overfitting ⚠️

![](https://raw.githubusercontent.com/topepo/2022-nyr-workshop/main/images/tuning-overfitting-train-1.svg)

## Dangers of overfitting ⚠️

![](https://raw.githubusercontent.com/topepo/2022-nyr-workshop/main/images/tuning-overfitting-test-1.svg)

## Dangers of overfitting ⚠️ `r hexes("yardstick")`

```{r}
tree_fit %>%
  augment(frog_train)
```

We call this "resubstition" or "repredicting the training set"

## Dangers of overfitting ⚠️ `r hexes("yardstick")`

```{r}
tree_fit %>%
  augment(frog_train) %>%
  rmse(latency, .pred)
```

We call this a "resubstition metric"

## Dangers of overfitting ⚠️ `r hexes("yardstick")`

::: columns
::: {.column width="50%"}
```{r}
tree_fit %>%
  augment(frog_train) %>%
  rmse(latency, .pred)
```
:::

::: {.column width="50%"}
:::
:::

## Dangers of overfitting ⚠️ `r hexes("yardstick")`

::: columns
::: {.column width="50%"}
```{r}
tree_fit %>%
  augment(frog_train) %>%
  rmse(latency, .pred)
```
:::

::: {.column width="50%"}
```{r}
tree_fit %>%
  augment(frog_test) %>%
  rmse(latency, .pred)
```
:::
:::

## Dangers of overfitting ⚠️ `r hexes("yardstick")`

::: columns
::: {.column width="50%"}
:::

::: {.column width="50%"}
```{r}
tree_fit %>%
  augment(frog_test) %>%
  rmse(latency, .pred)
```
:::
:::

Really though... don't use the test set until the *very* end of modeling.

We're just demonstrating overfitting here.

##  {background-image="https://media.giphy.com/media/55itGuoAJiZEEen9gg/giphy.gif" background-size="800px"}

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*Use `augment()` and `metrics()` to compute metrics for both training and testing data.*

*Notice the evidence of overfitting!* ⚠️

```{r}
#| echo: false
countdown(minutes = 5)
```

## Dangers of overfitting ⚠️ `r hexes("yardstick")`

::: columns
::: {.column width="50%"}
```{r}
tree_fit %>%
  augment(frog_train) %>%
  metrics(latency, .pred)
```
:::

::: {.column width="50%"}
```{r}
tree_fit %>%
  augment(frog_test) %>%
  metrics(latency, .pred)
```
:::
:::

. . .

What if we want to compare more models?

. . .

And/or more model configurations?

. . .

And we want to understand if these are important differences?

# The testing data is precious 💎

# How can we use the *training* data to compare and evaluate different models? 🤔

##  {background-color="white" background-image="https://www.tmwr.org/premade/resampling.svg" background-size="1000px"}

## Cross-validation

![](https://www.tmwr.org/premade/three-CV.svg)

## Cross-validation

![](https://www.tmwr.org/premade/three-CV-iter.svg)

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*If we use 10 folds, what percent of the training data*

-   *ends up in analysis*
-   *ends up in assessment*

*for* **each** *fold?*

![](images/snake.png){width="300"}

```{r}
#| echo: false
countdown(minutes = 3)
```

## Resampling `r hexes("rsample")`

```{r}
vfold_cv(frog_train) ## v = 10 is default
```

## Resampling `r hexes("rsample")`

```{r}
vfold_cv(frog_train, v = 5)
```

## Resampling `r hexes("rsample")`

What is in this?

```{r}
frog_folds <- vfold_cv(frog_train, v = 10)
frog_folds$splits[1:3]
```

## Bootstrapping

![](https://www.tmwr.org/premade/bootstraps.svg)

## Resampling `r hexes("rsample")`

```{r}
bootstraps(frog_train)
```

##  {background-iframe="https://rsample.tidymodels.org/reference/index.html"}

::: footer
:::

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*Create:*

-   *cross-validation folds with stratification*
-   *bootstrap folds (change `times` from the default)*
-   *validation resample*

```{r}
#| echo: false
countdown(minutes = 5)
```

## Resampling `r hexes("rsample")`

```{r}
vfold_cv(frog_train, strata = latency)
```

. . .

Stratification often helps, with very little downside

## Resampling `r hexes("rsample")`

```{r}
bootstraps(frog_train, times = 10)
```

## Resampling `r hexes("rsample")`

```{r}
validation_split(frog_train, strata = latency)
```

. . .

A validation split is just another type of resample

## Evaluating model performance `r hexes("rsample")`

```{r}
set.seed(123)
frog_folds <- vfold_cv(frog_train, v = 10, strata = latency)
frog_folds
```

. . .

Set the seed when creating resamples

## Evaluating model performance `r hexes("tune")`

```{r}
fit_resamples(tree_wflow, frog_folds)
```

. . .

Where are the fitted models??!??

## Evaluating model performance `r hexes("tune")`

```{r}
fit_resamples(tree_wflow, frog_folds)
```

Where are the fitted models??!?? 🗑️

. . .

For more advanced use cases, you can extract and save them: <https://www.tmwr.org/resampling.html#extract>

## Evaluating model performance `r hexes("tune")`

```{r}
fit_resamples(tree_wflow, frog_folds) %>%
  collect_metrics()
```

. . .

We can reliably measure performance using only the **training** data 🎉

## Embarrassingly parallel `r hexes("tune")`

```{r}
doParallel::registerDoParallel()

fit_resamples(tree_wflow, frog_folds) %>%
  collect_metrics()
```

. . .

Each fit is independent of the others

## Comparing metrics `r hexes("yardstick")`

How do the metrics from resampling compare to the metrics from the training set?

::: columns
::: {.column width="50%"}
```{r}
tree_fit %>%
  augment(frog_train) %>%
  metrics(latency, .pred)
```
:::

::: {.column width="50%"}
```{r}
fit_resamples(tree_wflow, frog_folds) %>%
  collect_metrics() %>% 
  select(.metric, mean, n)
```
:::
:::

. . .

When looking at the results on this slide, remember that:

⚠️ the training set gives you overly optimistic metrics

⚠️ use resampling instead of the test set

## Evaluating model performance `r hexes("tune")`

```{r}
ctrl_frog <- control_resamples(save_pred = TRUE)

tree_preds <- 
  fit_resamples(tree_wflow, frog_folds, control = ctrl_frog) %>%
  collect_predictions()

tree_preds
```

## 

```{r}
tree_preds %>% 
  ggplot(aes(latency, .pred, color = id)) + 
  geom_abline(lty = 2, col = "gray", size = 1.5) +
  geom_point(alpha = 0.5) +
  coord_obs_pred()
```

# Decision tree 🌳

# Random forest 🌳🌲🌴🌵🌴🌳🌳🌴🌲🌵🌴🌲🌳🌴🌳🌵🌵🌴🌲🌲🌳🌴🌳🌴🌲🌴🌵🌴🌲🌴🌵🌲🌳

## Create a random forest model `r hexes("parsnip")`

```{r}
rf_spec <- rand_forest(trees = 1000, mode = "regression")
rf_spec
```

## Create a random forest model `r hexes("workflows")`

```{r}
rf_wflow <- workflow(latency ~ ., rf_spec)
rf_wflow
```

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*Use `fit_resamples()` and `rf_wflow` to:*

-   *keep predictions*
-   *compute metrics*
-   *plot true vs. predicted values*

```{r}
#| echo: false
countdown(minutes = 5)
```

## Evaluating model performance `r hexes("tune")`

```{r}
ctrl_frog <- control_resamples(save_pred = TRUE)
rf_res <- fit_resamples(rf_wflow, frog_folds, control = ctrl_frog)
collect_metrics(rf_res)
```

## 

```{r}
collect_predictions(rf_res) %>% 
  ggplot(aes(latency, .pred, color = id)) + 
  geom_abline(lty = 2, col = "gray", size = 1.5) +
  geom_point(alpha = 0.5) +
  coord_obs_pred()
```

## How can we compare multiple model workflows at once? {background-image="images/Hatching-process.jpg"}

## Evaluate a workflow set

```{r}
workflow_set(list(latency ~ .), list(tree_spec, rf_spec))
```

## Evaluate a workflow set

```{r}
workflow_set(list(latency ~ .), list(tree_spec, rf_spec)) %>%
  workflow_map("fit_resamples", resamples = frog_folds)
```

## Evaluate a workflow set

```{r}
workflow_set(list(latency ~ .), list(tree_spec, rf_spec)) %>%
  workflow_map("fit_resamples", resamples = frog_folds) %>%
  rank_results() %>% 
  select(model, preprocessor, .metric, mean, std_err, n)
```

. . .

Lots more available with workflow sets, like `collect_metrics()`, `autoplot()` methods, and more!

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*When do you think a workflow set would be useful?*

```{r}
#| echo: false
countdown(minutes = 3)
```

# Can our random forest model be optimized?

##  {background-iframe="https://parsnip.tidymodels.org/reference/details_rand_forest_ranger.html#tuning-parameters"}

::: footer
:::

# Tuning hyperparameters

## Optimize the random forest `r hexes("parsnip")`

```{r}
rf_tune_spec <- 
  rand_forest(
    trees = 1000, 
    mtry = tune(), 
    min_n = tune()
  ) %>%
  set_mode("regression")
rf_tune_spec
```

## Optimize the random forest `r hexes("workflows")`

```{r}
rf_tune_wflow <- workflow(latency ~ ., rf_tune_spec)
rf_tune_wflow
```

## Optimize the random forest `r hexes("tune")`

We can't **fit** this workflow to our resamples! 😩

```{r, error = TRUE}
fit_resamples(rf_tune_wflow, frog_folds)
```

## Optimize the random forest `r hexes("tune")`

Instead we can **tune** this workflow: 😌

```{r}
# The bare minimum syntax
tune_grid(rf_tune_wflow, frog_folds)
```

## Optimize the random forest `r hexes("tune")`

```{r}
# Save some values in the object
ctrl <- control_grid(save_workflow = TRUE, save_pred = TRUE)

# Control randomness of the grid
set.seed(1)

rf_tune_res <- tune_grid(rf_tune_wflow, frog_folds, control = ctrl)
show_best(rf_tune_res, metric = "rmse")
```

## Optimize the random forest `r hexes("tune")`

```{r}
#| echo: false
theme_set(theme_light())
```

```{r}
autoplot(rf_tune_res)
```

## Optimize the random forest `r hexes("tune")`

```{r}
select_best(rf_tune_res, metric = "rmse")
```

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*Tune the decision tree model we started with.*

*(Use the skeleton in the `tune_tree` chunk.)*

```{r}
#| echo: false
countdown(minutes = 7)
```

## Optimize the decision tree `r hexes("tune")`

```{r}
tree_spec <- 
  decision_tree(
    cost_complexity = tune(), 
    tree_depth = tune(),
    min_n = tune()
  ) %>%
  set_mode("regression")

tree_wflow <- workflow(latency ~ ., tree_spec)

set.seed(1)
tree_tune_res <- tune_grid(tree_wflow, frog_folds, control = ctrl)
show_best(tree_tune_res, metric = "rmse")
```

## Optimize the decision tree `r hexes("tune")`

```{r}
autoplot(tree_tune_res)
```

## Selecting a model

Let's make a workflow set on-the-fly to compare models: 

```{r wflow-set}
frog_res <- as_workflow_set(rf = rf_tune_res, cart = tree_tune_res)
autoplot(frog_res, metric = "rmse")
```

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}


*End of the day discussion!*

*Which model do you think you would decide to use?*

*What surprised you the most?*

*What is one thing you are looking forward to for tomorrow?*

```{r}
#| echo: false
countdown(minutes = 5)
```
