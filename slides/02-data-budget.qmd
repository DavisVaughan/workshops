---
title: "3 - Your data budget"
subtitle: "Machine learning with tidymodels"
format:
  revealjs: 
    slide-number: true
    footer: <https://workshops.tidymodels.org>
    include-before-body: header.html
    theme: [default, tidymodels.scss]
knitr:
  opts_chunk: 
    echo: true
---

```{r}
#| include: false
#| file: setup.R
```

##  {background-image="https://media.giphy.com/media/13otmMzoPMnRYY/giphy-downsized-large.gif" background-size="800px"}

## Data on flights out of DCA

```{r}
## devtools::install_github("simonpcouch/dcflights21")
library(tidyverse)
library(tidymodels)
library(dcflights21)
data(dcflights)
```

Type `?dcflights` to learn more about this dataset.

## Data on flights out of DCA

```{r}
glimpse(dcflights)
```

## Data on flights out of DCA

-   N = 2702
-   a numeric outcome `dep_delay`
-   7 other variables, including `destination`, `hour`, and others

## Data splitting and spending

For machine learning, we typically split data into training and test sets:

. . .

-   The **training set** is used to estimate model parameters.
-   The **test set** is used to find an independent assessment of model performance.

. . .

Do not 🚫 use the test set during training.

## 

```{r}
#| echo: false
#| fig.width: 12
#| fig.height: 3
#| 
set.seed(123)
one_split <- slice(dcflights, 1:30) %>% 
  initial_split() %>% 
  tidy() %>% 
  add_row(Row = 1:30, Data = "Original") %>% 
  mutate(Data = case_when(
    Data == "Analysis" ~ "Training",
    Data == "Assessment" ~ "Testing",
    TRUE ~ Data
  )) %>% 
  mutate(Data = factor(Data, levels = c("Original", "Training", "Testing")))
all_split <-
  ggplot(one_split, aes(x = Row, y = fct_rev(Data), fill = Data)) + 
  geom_tile(color = "white",
            size = 1) + 
  scale_fill_manual(values = splits_pal, guide = "none") +
  theme_minimal() +
  theme(axis.text.y = element_text(size = rel(2)),
        axis.text.x = element_blank(),
        legend.position = "top",
        panel.grid = element_blank()) +
  coord_equal(ratio = 1) +
  labs(x = NULL, y = NULL)
all_split
```

## 

::: r-fit-text
**The more data we spend** 🤑
:::

::: r-fit-text
**the better estimates we'll get.**
:::

## Data splitting and spending

-   Spending too much data in training prevents us from a good assessment of predictive **performance**.

-   Spending too much in testing keeps us from finding a good estimate of model **parameters**.

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*When is a good time to split your data?*

```{r}
#| echo: false
countdown(minutes = 3)
```

## 

::: r-fit-text
**The test set is precious** 💎
:::

## Data splitting and spending `r hexes("rsample")`

```{r}
library(tidymodels)

set.seed(123)
flights_split <- initial_split(dcflights, strata = dep_delay)
flights_split
```

## Data splitting and spending `r hexes("rsample")`

```{r}
flights_train <- training(flights_split)
flights_test <- testing(flights_split)
```

## Data splitting and spending `r hexes("rsample")`

```{r}
glimpse(flights_train)
```

## Data splitting and spending `r hexes("rsample")`

```{r}
glimpse(flights_test)
```

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*Split your data so 20% is held out for the test set.*

```{r}
#| echo: false
countdown(minutes = 5)
```

## Data splitting and spending `r hexes("rsample")`

```{r}
library(tidymodels)

set.seed(123)
flights_split <- initial_split(dcflights, prop = 0.8, strata = dep_delay)
flights_train <- training(flights_split)
flights_test <- testing(flights_split)

nrow(flights_train)
nrow(flights_test)
```

# Exploratory data analysis for ML 🧐

## 

```{r}
ggplot(flights_train, aes(dep_delay)) +
  geom_histogram(bins = 20)
```

## 

```{r}
ggplot(flights_train, aes(dep_delay)) +
  geom_histogram(bins = 20) +
  scale_x_continuous(trans = scales::pseudo_log_trans(base = 10))
```

## 

```{r}
ggplot(flights_train, aes(dep_delay, destination, fill = destination)) +
  geom_boxplot(alpha = 0.3, show.legend = FALSE)
```

## 

```{r}
flights_train %>%
  mutate(destination = fct_reorder(destination, dep_delay)) %>%
  ggplot(aes(dep_delay, destination, fill = destination)) +
  geom_boxplot(alpha = 0.3, show.legend = FALSE) +
  scale_x_continuous(trans = scales::pseudo_log_trans(base = 10))
```

## 

```{r}
#| fig.width: 6.8
#| fig.height: 5 
ggplot(flights_train, aes(hour, duration)) +
  stat_summary_hex(aes(z = dep_delay), alpha = 0.7, bins = 12) +
  scale_fill_viridis_c() +
  labs(fill = "mean delay")
```

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*Explore the `dcflights` data on your own!*

```{r}
#| echo: false
countdown(minutes = 5)
```

::: notes
Make a plot or summary and then share with neighbor
:::
