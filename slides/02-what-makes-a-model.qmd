---
title: "2 - What makes a model?"
subtitle: "Machine learning with tidymodels"
format:
  revealjs: 
    slide-number: true
    footer: <https://workshops.tidymodels.org>
    include-before-body: header.html
    theme: [default, tidymodels.scss]
knitr:
  opts_chunk: 
    echo: true
---

```{r}
#| include: false
#| file: setup.R
```

##  {background-image="https://media.giphy.com/media/13otmMzoPMnRYY/giphy-downsized-large.gif" background-size="800px"}

## Data on flights out of DCA

```{r}
## devtools::install_github("simonpcouch/dcflights21")
library(tidyverse)
library(tidymodels)
library(dcflights21)
data(dcflights)
```

Type `?dcflights` to learn more about this dataset.

## Data on flights out of DCA

```{r}
glimpse(dcflights)
```

## Data on flights out of DCA

-   N = 2702
-   a numeric outcome `dep_delay`
-   7 other variables, including `destination`, `hour`, and others

## 

```{r}
ggplot(dcflights, aes(dep_delay)) +
  geom_histogram(bins = 20)
```

## 

```{r}
ggplot(dcflights, aes(dep_delay)) +
  geom_histogram(bins = 20) +
  scale_x_continuous(trans = scales::pseudo_log_trans(base = 10))
```

## 

```{r}
ggplot(dcflights, aes(dep_delay, destination, fill = destination)) +
  geom_boxplot(alpha = 0.3, show.legend = FALSE)
```

## 

```{r}
dcflights %>%
  mutate(destination = fct_reorder(destination, dep_delay)) %>%
  ggplot(aes(dep_delay, destination, fill = destination)) +
  geom_boxplot(alpha = 0.3, show.legend = FALSE) +
  scale_x_continuous(trans = scales::pseudo_log_trans(base = 10))
```

## 

```{r}
#| fig.width: 6.8
#| fig.height: 5 
ggplot(dcflights, aes(hour, duration)) +
  stat_summary_hex(aes(z = dep_delay), alpha = 0.7, bins = 12) +
  scale_fill_viridis_c() +
  labs(fill = "mean delay")
```

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*Explore the `dcflights` data on your own!*

```{r}
#| echo: false
countdown(minutes = 5)
```

::: notes
Make a plot or summary and then share with neighbor
:::

# What makes a model?

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*How do you fit a linear model in R?*

*How many different ways can you think of?*

```{r}
#| echo: false
countdown(minutes = 3)
```

. . .

- `lm` for generalized linear model

- `glmnet` for regularized regression

- `keras` for regression using TensorFlow

- `stan` for Bayesian regression

- `spark` for large data sets


## To specify a model with parsnip `r hexes("parsnip")`

. . .

- Choose a **model**
- Specify an **engine**
- Set the **mode**

## To specify a model with parsnip `r hexes("parsnip")`

```{r}
linear_reg()
```

## To specify a model with parsnip `r hexes("parsnip")`

```{r}
linear_reg() %>%
  set_engine("glmnet")
```

## To specify a model with parsnip `r hexes("parsnip")`

```{r}
linear_reg() %>%
  set_engine("stan")
```



## To specify a model with parsnip `r hexes("parsnip")`

```{r}
decision_tree()
```

## To specify a model with parsnip `r hexes("parsnip")`

```{r}
decision_tree() %>% 
  set_mode("regression")
```

. . .


:::{.smaller}
All available models are listed at <https://www.tidymodels.org/find/parsnip/>
:::

## {background-iframe="https://www.tidymodels.org/find/parsnip/"}

## Your turn {transition="slide-in"}

![](images/parsnip-flagger.jpg){.absolute top="0" right="0" width="150" height="150"}

*Run the `tree_spec` chunk in your `.Rmd`.*

*Edit this code so it fits a different model.*

```{r}
#| echo: false
countdown(minutes = 5)
```


:::{.smaller}
All available models are listed at <https://www.tidymodels.org/find/parsnip/>
:::

# A model workflow

##  {background-image="https://media.giphy.com/media/xUA7b0Klw8Wfor7FWo/giphy.gif" background-size="800px"}

## 


```{r}
tree_spec <-
  decision_tree() %>% 
  set_mode("regression")

tree_spec %>% 
  fit(dep_delay ~ duration + hour, 
      data = dcflights) 
```

##

```{r}
tree_spec <-
  decision_tree() %>% 
  set_mode("regression")

workflow() %>%
  add_model(tree_spec) %>%
  add_formula(dep_delay ~ duration + hour) %>%
  fit(data = dcflights) 
```

##


```{r}
tree_spec <-
  decision_tree() %>% 
  set_mode("regression")

workflow() %>%
  add_model(tree_spec) %>%
  add_variables(outcomes = dep_delay, predictors = c(duration, hour)) %>%
  fit(data = dcflights) 
```

##

```{r}
tree_spec <-
  decision_tree() %>% 
  set_mode("regression")

workflow(dep_delay ~ duration + hour, tree_spec) %>% 
  fit(data = dcflights) 
```

